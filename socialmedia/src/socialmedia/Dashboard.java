/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package socialmedia;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;

import java.sql.PreparedStatement;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static socialmedia.Graphstructure.initiateGraph;
/**
 *
 * @author Lenovo
 */
public class Dashboard extends javax.swing.JFrame {
private int userID;
private int clicking;
private Connection conn;
private Statement stmt;
DefaultTableModel model;
DefaultTableModel model2;
Graphstructure userGraph = new Graphstructure();

    /**
     * Creates new form Dashboard
     */
    public Dashboard(int userID) {
        this.userID=userID;
       System.out.println("logged in as "+userID);
       conn= Dbconnection.dbconnect();
        initComponents();
        setRecordsToTable(usertable);
        initiateGraph(userGraph);
        setReccomendedFriends(recommended);
        System.out.println("testing: "+userGraph.suggestUsersToFollow(9));
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        profile = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        postarea = new javax.swing.JTextArea();
        post = new javax.swing.JButton();
        catagory = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        follow = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        like = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        usertable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        recommended = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(134, 182, 246));

        profile.setFont(new java.awt.Font("Segoe UI Emoji", 1, 12)); // NOI18N
        profile.setText("Logout");
        profile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(profile)
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addComponent(profile)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(238, 245, 255));

        postarea.setColumns(20);
        postarea.setRows(5);
        postarea.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(23, 107, 135), 2));
        jScrollPane1.setViewportView(postarea);

        post.setBackground(new java.awt.Color(255, 249, 242));
        post.setText("Post");
        post.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(23, 107, 135), 2));
        post.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postActionPerformed(evt);
            }
        });

        catagory.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        catagory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Writing", "Paiting", "Music", "Pottery", "Numismatics" }));
        catagory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                catagoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(catagory, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(post, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(catagory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(post, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(134, 182, 246));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(23, 107, 135));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("User Name");

        follow.setBackground(new java.awt.Color(0, 0, 0));
        follow.setForeground(new java.awt.Color(255, 255, 255));
        follow.setText("Follow");
        follow.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(23, 107, 135), 2));
        follow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                followActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(follow, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(154, 154, 154))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(follow)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 249, 236));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("User Posts");

        like.setBackground(new java.awt.Color(23, 107, 135));
        like.setForeground(new java.awt.Color(255, 255, 255));
        like.setText("Like");
        like.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                likeActionPerformed(evt);
            }
        });

        usertable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PostID", "UserName", "Post Content", "Likes"
            }
        ));
        usertable.setShowGrid(true);
        usertable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                usertableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(usertable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jLabel2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(like)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(like, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        recommended.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Recommended people"
            }
        ));
        jScrollPane3.setViewportView(recommended);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void postActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postActionPerformed
//          String text = follow.getText().trim();
//
//    // Assuming tableModel is a DefaultTableModel for your table
//  if (usertable != null) {
//    DefaultTableModel tableModel = (DefaultTableModel) usertable.getModel();
//    tableModel.addRow(new Object[]{text});
//} else {
//    System.err.println("usertable is not initialized!");
//}
        String content= postarea.getText();
        createPost(content, catagory);


    }//GEN-LAST:event_postActionPerformed

    private void likeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_likeActionPerformed
//        // TODO add your handling code here:
//    int selectedRow = usertable.getSelectedRow(); // Get the selected row index
//    if (selectedRow != -1) {
//        DefaultTableModel tableModel = (DefaultTableModel) usertable.getModel();
//        int likeCountColumnIndex = 1; // Assuming the like count is in the second column (index 1)
//        int currentLikes = (int) tableModel.getValueAt(selectedRow, likeCountColumnIndex);
//        tableModel.setValueAt(currentLikes + 1, selectedRow, likeCountColumnIndex); // Increment likes by 1
//    } else {
//        JOptionPane.showMessageDialog(this, "Please select a user to like.");
//    }
    LikePost(clicking);

    }//GEN-LAST:event_likeActionPerformed

    private void usertableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usertableMouseClicked
        // TODO add your handling code here:
        int rowNo = usertable.getSelectedRow();
        TableModel model = usertable.getModel();
     clicking = Integer.parseInt(model.getValueAt(rowNo, 0).toString());
        
    }//GEN-LAST:event_usertableMouseClicked

    private void followActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_followActionPerformed
        // TODO add your handling code here:
        int IDtoFollow=Integer.parseInt(username.getText().trim());
        followUser(userID,IDtoFollow);
    }//GEN-LAST:event_followActionPerformed

    private void catagoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_catagoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_catagoryActionPerformed

    private void profileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileActionPerformed
        // TODO add your handling code here:
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_profileActionPerformed
  
    private void LikePost(int postId){
    Connection conn = Dbconnection.dbconnect();

    try{
        PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Likes (userID, postID) VALUES (?, ?)");
        pstmt.setInt(1, userID); 
        pstmt.setInt(2, postId);
        pstmt.executeUpdate();
        JOptionPane.showMessageDialog(null, "You have liked "+postId);
        PreparedStatement pstmt2 = conn.prepareStatement("UPDATE Posts SET like_count = like_count + 1 WHERE post_id = ?");
    pstmt2.setInt(1, postId);
    pstmt2.executeUpdate();
        conn.close();
//        model.setRowCount(0);

        setRecordsToTable(usertable);

    }catch (Exception ex){
        ex.printStackTrace();
    }
   }
    
  

    private void followUser(int followerId, int followeeId) {
    Connection conn = Dbconnection.dbconnect();
    
    try {
        PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Follow (follower_id, followee_id) VALUES (?, ?)");
        pstmt.setInt(1, followerId);
        pstmt.setInt(2, followeeId);
        pstmt.executeUpdate();
        conn.close();
        JOptionPane.showMessageDialog(null, followerId + "\t you now follow \t" + followeeId);
//        updateGraph(followerId, followeeId);   
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}
    
    


private void post(String content){
    Connection conn = Dbconnection.dbconnect();
    
    try{
        PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Posts (content, userID) VALUES (?, ?)");
        pstmt.setString(1, content); 
        pstmt.setInt(2, userID);
        pstmt.executeUpdate();
        conn.close();
        JOptionPane.showMessageDialog(null, "Posted Successfully");

    }catch (Exception ex){
        ex.printStackTrace();
    }
}
public void setReccomendedFriends(JTable recommended){
    DefaultTableModel tableModel = (DefaultTableModel) recommended.getModel();
    tableModel.setRowCount(0);
    List<Integer> reccomendedUsers=userGraph.suggestUsersToFollow(userID);
//        List<Integer> mutualFollowers = gs.getMutualFollowers(userId);

    for (Integer user : reccomendedUsers) {
        String usernamee = getUsernameByUserId(user);
        System.out.println(usernamee);
        Object[] row = {usernamee};
        model2 = (DefaultTableModel)recommended.getModel();

        model2.addRow(row);
    }


    }
public String getUsernameByUserId(int userId) {
    String followed_users = null;
    Connection conn = Dbconnection.dbconnect();
    
    try {
        // Prepare SQL query
        String query = "SELECT UserName FROM Users WHERE UserId = ?";
        
        // Execute query
        PreparedStatement pstmt = conn.prepareStatement(query);
        pstmt.setInt(1, userId);
        ResultSet rs = pstmt.executeQuery();
        
        // Process the result set
        if (rs.next()) {
            followed_users = rs.getString("UserName");
        }
        conn.close();
    } catch (Exception ex) {
        ex.printStackTrace();
    }
    
    return followed_users;
}
public void setRecordsToTable(JTable usertable) {
    DefaultTableModel model2 = (DefaultTableModel) usertable.getModel();
    model2.setRowCount(0); // Clear existing table data
    try {
        Connection con = Dbconnection.dbconnect();

        // Modify the query to retrieve posts based on user's selected categories
        PreparedStatement pst = con.prepareStatement("SELECT p.post_id, p.userID, p.content, p.like_count " +
                                                       "FROM Posts p " +
                                                       "INNER JOIN UserCategories uc ON p.category_id = uc.CategoryId " +
                                                       "WHERE uc.UserId = ?");
        pst.setInt(1, userID);
        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            int postId = rs.getInt("post_id");
            int userId = rs.getInt("userID");
            String content = rs.getString("content");
            int likes = rs.getInt("like_count");

            Object[] obj = {postId, getUsernameByUserId(userId), content, likes};
            model2.addRow(obj);
        }

    } catch (Exception e) {
        e.printStackTrace();
    }
}

//
//  private void createPost(String content){
//    Connection conn = Dbconnection.dbconnect();
//    
//    try{
//        PreparedStatement pstmt = conn.prepareStatement("INSERT INTO Posts (content, userID) VALUES (?, ?)");
//        pstmt.setString(1, content); 
//        pstmt.setInt(2, userID);
//        pstmt.executeUpdate();
//        conn.close();
//        JOptionPane.showMessageDialog(null, "Posted Successfully");
//        model.setRowCount(0);
//
//        setRecordsToTable(usertable);
//
//    }catch (Exception ex){
//        ex.printStackTrace();
//    }
//  
//  }

private void createPost(String content, JComboBox<String> catagory) {
    Connection conn = Dbconnection.dbconnect();
    
    try {
        // Get the selected category name from the JComboBox
        String categoryName = (String) catagory.getSelectedItem();
        
        // Query the database to get the category ID based on the selected category name
        int categoryID = -1; // Initialize to an invalid value
        String query = "SELECT CategoryId FROM Categories WHERE CategoryName = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, categoryName);
            ResultSet resultSet = pstmt.executeQuery();
            if (resultSet.next()) {
                categoryID = resultSet.getInt("CategoryId");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        // Insert the post into the database with the retrieved category ID
        String insertQuery = "INSERT INTO Posts (content, userID, category_id) VALUES (?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertQuery)) {
            pstmt.setString(1, content); 
            pstmt.setInt(2, userID);
            pstmt.setInt(3, categoryID); // Set the category ID
            
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "Posted Successfully");
//            model.setRowCount(0);
            setRecordsToTable(usertable);
            setReccomendedFriends(recommended);
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            conn.close();
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
         try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dashboard(0).setVisible(true);
            }
        });
    }

/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       
        //</editor-fold>

        /* Create and display the form */
       
       

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> catagory;
    private javax.swing.JButton follow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton like;
    private javax.swing.JButton post;
    private javax.swing.JTextArea postarea;
    private javax.swing.JButton profile;
    private javax.swing.JTable recommended;
    private javax.swing.JTextField username;
    private javax.swing.JTable usertable;
    // End of variables declaration//GEN-END:variables
}
